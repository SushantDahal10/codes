#include <iostream>

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int priority;
};

void PriorityScheduling(Process processes[], int n) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    int current_time = 0;

    std::cout << "Order of execution: ";

    for (int i = 0; i < n; ++i) {
        int highest_priority = INT_MAX;
        int shortest = -1;

        for (int j = 0; j < n; ++j) {
            if (processes[j].arrival_time <= current_time && processes[j].priority < highest_priority && processes[j].burst_time > 0) {
                shortest = j;
                highest_priority = processes[j].priority;
            }
        }

        if (shortest == -1) {
            int next_arrival = INT_MAX;
            for (int j = 0; j < n; ++j) {
                if (processes[j].arrival_time > current_time && processes[j].arrival_time < next_arrival) {
                    next_arrival = processes[j].arrival_time;
                }
            }
            current_time = next_arrival;
            i--; // No process to execute at this moment, decrement i for waiting.
        } else {
            std::cout << processes[shortest].pid << " ";
            total_waiting_time += current_time - processes[shortest].arrival_time;
            total_turnaround_time += current_time - processes[shortest].arrival_time + processes[shortest].burst_time;
            current_time += processes[shortest].burst_time;

            processes[shortest].burst_time = INT_MAX; // Mark the process as completed
        }
    }

    std::cout << "\nAverage Waiting Time: " << (double)total_waiting_time / n << std::endl;
    std::cout << "Average Turnaround Time: " << (double)total_turnaround_time / n << std::endl;
}

int main() {
    int n;
    std::cout << "Enter the number of processes: ";
    std::cin >> n;

    Process processes[n];
    std::cout << "Enter arrival time, burst time, and priority for each process:\n";
    for (int i = 0; i < n; ++i) {
        processes[i].pid = i + 1;
        std::cin >> processes[i].arrival_time >> processes[i].burst_time >> processes[i].priority;
    }

    PriorityScheduling(processes, n);

    return 0;
}
