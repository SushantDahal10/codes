#include <iostream>
#include <climits>

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
};

void PrioritySchedulingPreemptive(Process processes[], int n) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    int current_time = 0;
    bool all_completed = false;

    while (!all_completed) {
        int highest_priority = INT_MAX;
        int shortest = -1;

        for (int i = 0; i < n; ++i) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time < highest_priority && processes[i].remaining_time > 0) {
                shortest = i;
                highest_priority = processes[i].remaining_time;
            }
        }

        if (shortest == -1) {
            int next_arrival = INT_MAX;
            for (int i = 0; i < n; ++i) {
                if (processes[i].arrival_time > current_time && processes[i].arrival_time < next_arrival) {
                    next_arrival = processes[i].arrival_time;
                }
            }
            current_time = next_arrival;
        } else {
            processes[shortest].remaining_time--;

            if (processes[shortest].remaining_time == 0) {
                int completion_time = current_time + 1;
                total_waiting_time += completion_time - processes[shortest].arrival_time - processes[shortest].burst_time;
                total_turnaround_time += completion_time - processes[shortest].arrival_time;
                processes[shortest].remaining_time = INT_MAX;
            }

            current_time++;
        }

        all_completed = true;
        for (int i = 0; i < n; ++i) {
            if (processes[i].remaining_time != INT_MAX) {
                all_completed = false;
                break;
            }
        }
    }

    std::cout << "\nAverage Waiting Time: " << (double)total_waiting_time / n << std::endl;
    std::cout << "Average Turnaround Time: " << (double)total_turnaround_time / n << std::endl;
}

int main() {
    int n;
    std::cout << "Enter the number of processes: ";
    std::cin >> n;

    Process processes[n];
    std::cout << "Enter arrival time, burst time, and priority for each process:\n";
    for (int i = 0; i < n; ++i) {
        processes[i].pid = i + 1;
        std::cin >> processes[i].arrival_time >> processes[i].burst_time >> processes[i].priority;
        processes[i].remaining_time = processes[i].burst_time;
    }

    PrioritySchedulingPreemptive(processes, n);

    return 0;
}
